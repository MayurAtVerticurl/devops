get a t3a.xlarge machine
	2 CPU + 8 GB RAM - fyi this is hitting 200% CPU but would work.
	
Install docker 
https://blog.setapp.pl/sonarqube_introduction
docker run -d --name sonarqube -p 9000:9000 sonarqube:7.5-community
 docker ps
 
 Wait for the server to start and log in to SonarQube server on http://ip:9000 using default credentials: login: admin password: admin
 
 Create a token:
 
 
 Token name: sonarqube - Generate 
 
	23b5b7b56b420a5c5d3eba85246cde5d50c9f20a
	
Continue
	language: Java
	build: maven
	
	SonarQube code 
		mvn sonar:sonar \
  -Dsonar.host.url=http://18.223.136.35:9000 \
  -Dsonar.login=23b5b7b56b420a5c5d3eba85246cde5d50c9f20a
  

  
Go to jenkins
	Install "sonarqube scanner plugin" in jenkins - with/without restart

	Manage Jenkins
		Configure System
			Add SonarQueb
				Name: sonarqube (Not mandatory)
				Server URL: http://18.223.136.35:9000 (trailing slash fails)
				Credential: "Secret Text" credential
					Secret: <Token created from Sonarqube>
						If this is lost - This can be generated by 
							Administration -> 
			 
			 <your Jenkins instance>/sonarqube-webhook/
	http://18.222.66.179:8080/sonarqube-webhook/
			
Create webhook
--------------		
	SonarQube : Administration: Configuration: Webhook 
		http://<ip>:8080/sonarqube-webhook/


---------------------------------------------
pipeline {
    agent any
    tools {
        maven 'M3'
        //jdk 'jdk8'
    }
    stages {
        stage('SCM') {
            steps {
                git url: 'https://github.com/vilasvarghese/devops.git'
               
            }
        }
        stage('build && SonarQube analysis') {
            steps {
                withSonarQubeEnv('sonarqube') {
                    // Optionally use a Maven environment you've configured already
                    sh "mvn clean package sonar:sonar"
                }
            }
        }
        stage("Quality Gate") {
            steps {
                timeout(time: 1, unit: 'HOURS') {
                    // Parameter indicates whether to set pipeline to UNSTABLE if Quality Gate fails
                    // true = set pipeline to UNSTABLE, false = don't
                    waitForQualityGate abortPipeline: true
                }
            }
        }
    }
}
---------------------------------------------