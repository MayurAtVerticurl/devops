What is Git: Features, Command and Workflow in Git



Local repositories 
	- No collaboration 
		- Lack of community and ecosystem support
	- Huge disk space required
	- dependency management challenges
	- reduced availabilty and reliability
	- scalability challenges
	- Increased maintanance overhead

Remote repositories 
	- Time taking operations
	 - Network trip required
	- Blocking operations 


Distributed repositories
	- All disadv. solved.


Getting started
-----------------------------------------------------------------------------------------------------------
Go for ssh access

To setup GitHub SSH keys and use them on Ubuntu, follow these steps:

1.  Create a GitHub SSH key pair 
		ssh-keygen 
    Copy the value of the public SSH key 
    Login to GitHub and navigate to your account settings
    Click on the SSH and GPG link
    Click Add Key to register the public SSH key with your account
    Name the key and paste the copied  value into the text field
    Save your changes
    In your Git client, use the SSH based GitHub URL to clone your repo


2. git clone ssh url 
	git clone git@github.com:vilasvarghese/test1.git
	add some file in repo. 
	git add .
	git commit -m "test"
	git push 
	


3. ERROR: Permission to bitsvilas/hello-world-javascript-action.git denied to vilasvarghese
	git remote rm origin
	git remote add origin git@github.com:bitsvilas/hello-world-javascript-action.git




2 ways 
	initialize remote 	
	initialize locally 
	
	1. Existing remote
		while cloning get the ssh url
		
		




-----------------------------------------------------------------------------------------------------------
Git Life Cycle
-----------------------------------------------------------------------------------------------------------
On linux setup your env. referring to 
	git config --global user.name "Your Name"

	Follow https://docs.github.com/en/authentication/connecting-to-github-with-ssh

On windows 
	git config --global user.name "Your Name" is enough
	when you push it will automatically launch a window to sign in.
	


Refer images
	

	index
		staging area
		track changes to files. 
		You can add files to the staging area using the git add command.

Committing changes: 
	Once you have added files to the staging area
		you can commit the changes using the git commit command. 
		Each commit represents a snapshot of the repository at a particular point in time.

Creating branches: 
	Git allows you to create branches to work on different versions of the code simultaneously. You can create a new branch using the git branch command.

Switching branches: 
	switch between branches 
		using the git checkout command.

Merging branches: 
	When you are done working on a branch, you can merge it back into the main branch using the git merge command.

Pushing changes: 
	made changes to your local repository
		push them to a remote repository 
			(such 
			as GitHub) using the git push command.

Pulling changes: 
	pull changes from a remote repository 
		use 
			git pull command. 
			
Resolving conflicts: 
	two people make changes to the same file
		Git may encounter conflicts. 
		You will need to resolve these conflicts manually using a text editor.

Rebasing: 
	integrating changes 
		from one branch into another. 
		keep the history of the repository clean and organized.
		
Terminologies in git
	the "index" / "staging area" / "cache"
		To add changes to the index, you use the git add command. 
		
	 git commit
		Git takes the changes that are staged in the index
			creates a new commit object that records those changes.	




--------------------
how to initialize

Open your terminal or Git Bash if you're on Windows.
Navigate to the directory where you want to create your Git repository using the cd command. For example: cd Documents/Git.
Use the git init command to initialize a new Git repository in that directory. For example: git init.
Create a new file in your directory using your preferred text editor, or you can use the command line to create a file. For example: touch README.md.
Add the file to the Git repository using the git add command. For example: git add README.md.
Commit the changes to the repository using the git commit command. For example: git commit -m "Initial commit".
Create a new repository on GitHub. You can do this by logging in to your GitHub account and clicking on the "New" button on the Repositories page.
Copy the URL of your newly created repository.
Add the GitHub repository as a remote to your local repository using the git remote add command. For example: git remote add origin https://github.com/username/repo.git (replace "username" with your GitHub username and "repo" with the name of your repository).
Push the changes from your local repository to the GitHub repository using the git push command. For example: git push --set-upstream origin master (replace "main" with the name of your default branch, if it's different).
-----------------------------------------------------------------------------------------------------------
	• Git config
		
		
		git config 
			get or set configuration 
				configuration 
					control various aspects of Git's behavior. 
			used to configure Git 
				on a per-user basis
				per-repository basis
				globally.

some examples:
	get a list of all configuration:
	git config --list
	
	
get value of a specific configuration variable:

	git config user.name
	

set the value of a configuration variable:
	git config user.email "youremail@example.com"


To set a global configuration variable:
	git config --global user.name "Your Name"

----------

set a Git configuration variable 
	for a specific user only (rather than globally), 
	use 
		git config --local
		git config --local user.email "youremail@example.com"


When you use the --local option, 
	Git sets the configuration value in a file called 
		.git/config in the root directory of your repository. 
		This file contains repository-specific configuration options
		
--local is the default 
	so you don't actually need to specify 
	use 
		git config user.email "youremail@example.com" 
		Git will assume that you want to set the configuration value locally.
		
		
	-----------------------------------------------------------------------------------------------------------
	• Git init

	git init 
		create a new Git repository from scratch. 
		also creates a .git directory
		Refer "GitOneDay_Notes" line 315 (Here is what’s your .git will look like before your first commit:)
	

	
	git add .
	git commit -m "Initial commit"
	
	
	
When git init is executed in a directory
	
	Git creates a new directory called .git in the root of your repository. 
	.git 
		directory where Git stores all the 
			data and 
			metadata 
				associated with your repository.

	Git initializes an empty repository database 
		by creating several subdirectories inside the .git directory. 
		These subdirectories include 
			objects
			refs, and 
			heads.

	Git creates the 
		master branch 
		sets the HEAD pointer to point to the new branch.

	in the .git directory 
		Git creates a config file 
			store the configuration settings for the repository.

		Git creates a description 
			contains a brief description of the repository.

		Git creates a hooks directory in the .git directory 
			contains example scripts for Git hooks.

		Once the repository has been initialized, 
			use Git to 
				manage your files and 
				commit changes to the repository. 
				add files to the repository 
					git add
				commit changes 
					git commit
				create branches and tags 
					git branch and git tag.

		git init 
			needs to be run once per repository. 
			continue to use Git to manage the repository and its contents.
	
	-----------------------------------------------------------------------------------------------------------
	• Git add
	
		stage changes 
			in a file or directory 
				for inclusion in the next commit.

	When you make changes 
		those are initially untracked by Git. 
		git add command 
			select which changes you want to include in the next commit 
				by adding them to the Git staging area. 
				Once added to the staging area
					they can then be committed to the repository using the git commit command.

Here are some common uses of the git add command:

Stage specific changes in a file:

git add <file>
This command stages the changes made to the specified file for the next commit.

Stage changes in all modified and deleted files:

git add .
This command stages changes made to all modified and deleted files in the repository.

Stage changes in a specific directory:

git add <directory>
This command stages changes made to all files in the specified directory for the next commit.

It's important to note that git add only adds changes to the staging area; it does not create a commit. To commit the staged changes, you need to use the git commit command. You can also use the git status command to check which changes have been staged and which changes are still untracked.



-------
When you run git add, 
	starts tracking the changes 
	prepares those changes to be included in the next commit. 
	
	Internally what happens when we do git add:
	--------------------------------------------

	Git reads the contents of the file(s) you specified with the command.
	Git calculates the SHA-1 hash of the file(s) content
		is a unique identifier for the file(s).
	Git stores the contents of the file(s) 
		in the Git object database
		using the SHA-1 hash as the object's name.
	Git updates the Git index 
		(also known as the staging area) 
			with the SHA-1 hash of the file(s) content.
	By adding files to the staging area
		Git is keeping track of which files are ready to be committed. 
		This allows you to commit specific changes instead of committing all changes in the repository.
	It's important to note that git add only adds the changes to the staging area. 

		
	
	-----------------------------------------------------------------------------------------------------------
	• Git diff

	
Make some changes to a file in the repository.

	git status 
		see which files have been modified.

	git diff 
		differences between the modified file(s) and the last commit.

	add a new file 
		git diff 
			nothing
	git add .
		git diff
			nothing
		git diff --cached
			shows the diff between stage and commit
	modify the file
		git diff
			shows difference
		git diff --cached
			shows the diff between stage and commit 
			
-------------

different ways to use the git diff command, along with step-by-step examples:

git diff - 
	shows the difference between the working directory and the index.

$ git diff
	show changes made to files since the last commit 
		that are not yet staged for the next commit.

git diff --cached 
	--cached represent the staging area.
or 
git diff --staged - 
	
	shows the difference between the index and the last commit.
		changes you have staged for the next commit


$ git diff HEAD
	show changes made since the last commit
		including changes that are not yet staged.

git log --oneline
git diff <commit> <commit> - shows the difference between two commits.

git diff <branch>..<branch> - shows the difference between two branches.

$ git diff master..feature
This will show you the changes between the master and feature branches.

git diff <tag>..<tag> - shows the difference between two tags.



	-----------------------------------------------------------------------------------------------------------
	• Git commit


		a snapshot of your repository at a particular point in time. 
		records  
			changes 
			metadata 
				like the author
				the commit message
				reference to the parent commit.

	git commit
		Git creates a new commit object 
			adds it to the repository's commit history. 
			The commit is identified by a unique SHA-1 hash
				used to refer to the commit in other Git commands.

	git commit 
		commit message is mandatory
		describes the changes 
			what changes 
			why did you change?
			should be brief
				but informative
			
	first stage then commit
	
	Here's an example workflow for creating a commit in Git:

Make changes to one or more files in your working directory.
Use git add to stage the changes you want to include in the commit.

$ git add file1.txt file2.txt
Review the changes you have staged using git diff --cached or git diff --staged.

$ git diff --cached
Run git commit to create the commit. This will open your default text editor to allow you to enter a commit message.

$ git commit
Enter a commit message that describes the changes you have made in the commit.

Added new feature to file1.txt and fixed a bug in file2.txt
Save and close the commit message editor. Git will create the commit object and add it to the repository's commit history.
In summary, git commit is used to create a new commit in Git, which records the changes you have made to your files along with metadata like the commit message and author information. To create a commit, you must first stage the changes you want to include using git add, and then run git commit to create the commit object.

	-----------------------------------------------------------------------------------------------------------
	• Git reset
	
	
	Refer my presentation "Git_OneDay.ppt" slide number 53 then continue if required.
	
	undo changes a
	move the current branch pointer to a previous commit. 
	
Here are some common use cases for git reset:

Unstage changes: 
	If you've staged some changes 
		using git add
		don't want to include those changes in the next commit
			use 
				git reset to unstage them. 
	This can be done using the --mixed or --soft options
		followed by the name of the commit you want to reset to. For example:

git diff --cached 
$ git reset --mixed HEAD
This command will unstage the changes that were previously staged, but leave the changes in the working directory intact.
git diff --cached 	

Undo changes to the working directory: If you've made changes to your files in the working directory, but haven't staged them yet, you can use git reset to undo those changes. This can be done using the --hard option, followed by the name of the commit you want to reset to. For example:


$ git reset --hard HEAD
This command will discard any changes in the working directory that are not part of the specified commit.

Move the current branch pointer: If you want to move the current branch pointer to a previous commit, you can use git reset with the --soft option, followed by the name of the commit you want to reset to. This will keep the changes in the working directory and the index, but move the branch pointer to the specified commit. For example:


$ git reset --soft HEAD~2
This command will move the branch pointer back two commits, but keep the changes in the working directory and the index.

It's important to note that git reset can be a destructive operation, especially when used with the --hard option. Any changes that are discarded cannot be recovered, so it's important to use git reset with caution and make sure you understand the consequences of the operation.
	
--------------

Here are some common ways to use git reset:

Resetting the index: If you have added changes to the staging area using git add, but then decide that you want to remove those changes from the staging area, you can use git reset with the --mixed or --soft option. For example:


$ git reset HEAD file.txt
This command will remove the changes to file.txt from the staging area, but leave the changes in the working directory.

Undoing changes in the working directory: If you have made changes to your files in the working directory, but haven't yet added them to the staging area, you can use git reset with the --hard option to discard those changes. For example:

$ git reset --hard HEAD
This command will discard any changes in the working directory that are not part of the current commit.

Moving the branch pointer: If you want to move the branch pointer to a previous commit, you can use git reset with the --soft option. This will keep the changes in the working directory and the index, but move the branch pointer to the specified commit. For example:

$ git reset --soft HEAD~2
This command will move the branch pointer back two commits, but keep the changes in the working directory and the index.

Undoing a merge: If you have merged two branches and want to undo the merge, you can use git reset with the --hard option to reset the branch pointer to the commit before the merge. For example:

$ git reset --hard HEAD^
This command will undo the merge and set the branch pointer to the commit before the merge.

It's important to note that git reset can be a destructive command, especially when used with the --hard option, as it discards changes that cannot be recovered. So, it's important to use git reset with caution and make sure you understand the consequences of the operation.	
	
	-----------------------------------------------------------------------------------------------------------
	• Git status
	
		shows the current state of your 
			working directory and 
			staging area
		track changed files since last commit.

	run git status
		Git will display the following information:
			On branch: 
				Display current branch.
			Changes to be committed: 
				lists the files that have been staged.
			Changes not staged for commit: 
				lists the modified files 
					in your working directory 
						but haven't been staged yet.
			Untracked files: 
				lists of files not tracked by Git 
					have not been added to the staging area.

Here's an example output of git status:

On branch main
Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
        modified:   file1.txt
        new file:   file2.txt

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   file1.txt

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        file3.txt
This output shows that file1.txt has been modified and staged, file2.txt is a new file that has been added to the staging area, and file1.txt has been modified but not staged yet. Additionally, there is an untracked file called file3.txt that has not been added to the staging area.
	-----------------------------------------------------------------------------------------------------------
	• Git merge


	combine/merge changes from two or more branches. 
	Here are some of the common use cases of Git merge:

	Integrating feature branches: 
		create separate feature branches 
			to work on specific features or fixes. 
		Git merge 
			merge these branches 
				into the main development branch (e.g. master branch)
					integrate the changes 
					create a cohesive codebase.

	Resolving conflicts: 
		Two or more branches 
			can contain conflicting changes. 
		Git provides tools 
			identify conflicts 
			resolve conflicts 
			merge the changes in a way that preserves the work of all contributors.

	Branch maintenance:
		Git merge 
			Import changes changes from one branch into another. 
			useful when maintaining long-lived branches
				e.g. release branch 
					receives bug fixes from multiple development branches.

	Collaboration: 
		Git merge 
			essential for collaborative software development. 
			Developers 
				work on their own branches 
				then merge changes into a shared branch
			allow to work on separate tasks 
				without interfering with each other's work.

	-----------------------------------------------------------------------------------------------------------
	• Git push

	Github recently stopped support for password based push. Hence use ssh.
	This may fail if you clonned on linux using https and setup ssh access
	git remote rm origin
	git remote add origin git@github.com:<user>/last-part-of-repo.git
	e.g. git remote add origin git@github.com:vilasvarghese/docker-k8s.git
	

	git push 
		upload local repository changes  
			to a remote repository. 
		make changes to files in your local repository, you can use the git push command to send those changes to a remote repository, such as GitHub, GitLab, or Bitbucket. Here are the steps to use the git push command:

First, make sure you have changes to push by checking the status of your local repository using the git status command.

Next, add the changes you want to push to the staging area using the git add command. For example, if you want to push all changes, use the command git add ..

Once you have added the changes to the staging area, create a commit for those changes using the git commit command. For example, use the command git commit -m "Commit message" to create a commit with the message "Commit message".

After creating the commit, use the git push command to upload the changes to the remote repository. For example, use the command git push origin master to push the changes to the master branch of the remote repository.

If you are pushing to a remote repository for the first time, you may need to specify the remote repository URL using the git remote add command. For example, use the command git remote add origin https://github.com/username/repository.git to add a remote repository named "origin".

If your push fails due to conflicts with the remote repository, you may need to pull changes from the remote repository before pushing your changes. Use the git pull command to pull changes, resolve any conflicts, and then try the git push command again.

That's it! You have successfully pushed changes from your local repository to a remote repository using the git push command.


	-----------------------------------------------------------------------------------------------------------
	• Git pull
	
		download changes from a remote repository 
		merge them into the local repository. 
		When you collaborate with others on a Git project, you may need to download the latest changes made by others and merge them into your local repository. Here are the steps to use the git pull command:

	First, make sure you are in the local repository that you want to update. 
	You can check the current repository using the 
		git remote -v command.

	
	If there are any conflicts between the local repository and the remote repository, 
		Git will prompt you to resolve them. 
		Follow the instructions on the screen to resolve the conflicts manually.

	Once the merge is complete, 
		use the git status command to check the status of the local repository. 
		It should show that the local repository is up to date with the remote repository.

	That's it! You have successfully downloaded changes from a remote repository and merged them into your local repository using the git pull command.
		
----------------------------------------------------------
Git Branching

	HEAD branch 
		current active branch
		git status 
			displays where HEAD points
	Remote branch
		
		
	create new branch
	-----------------
		git branch <name>
		git branch first-branch
			ls .git/refs/heads/
			ls .git/refs/remotes/origin/
			will branch from the current/latest
		if i want to start from older
			git log --oneline
			
			git branch second-branch <commit id>
			git switch second-branch 
			git log --oneline
			
			git log -n
				see only the last "n" changes
			git log -1 
				see only the last change
			
	Switching branches
		git checkout <branch-name>
		git switch <branch-name>
		
----------------------
git checkout: 
	not preferred anymore
	used to 
		switch between branches
		check out a specific commit, or 
		discarding changes in a file. 
		It can also be used to create a new branch. 
		when checking out a branch
			it also updates the working directory 
				to match the contents of the branch being checked out. 
			This can be risky if there are any uncommitted changes in the working directory
				they could be overwritten.

git switch: 
	used for 
		switching between branches or 
		checking out a specific commit or tag. 
		introduced as a safer alternative to git checkout
		does not update the working directory by default when switching branches. 
		Instead, prompts to either stash or commit any uncommitted changes before switching branches.


----------------------
	Listing branches
	----------------
	see all remote branches
		git branch -r
	see all local branches
		git branch 
	
		
	Rename a branch
	----------------------
		git branch -m <new name>
		
		
	Publishing branches
	----------------------
		git push -u origin <local branch>
		git push -u origin feature/<name>
		
	Tracking branches
	-----------------
		local branch
		remote branch
			no relation but still related
			
	
	local 		V1		V2			V5
	remote 				(branched)	V3	V4

			can pull from remote
			can push to remote
			
			
		Create a remote branch in github directly - called "remote1".	
			
		if there is a branch named login  in remote which is not in local
			git branch --track login origin/remote1
				you get error that the remote branch is not present.
			
			N.B: With a single remote only 	
				git fetch 
					get all remote branches to sync to local.
					
					git branch
						lists only local branch
					git branch -r
						shows it.
					git branch -v -a
			
					git switch remote1
				
			will create new login and is based on remote login branch.

-----------------------
With Multiple Remotes
In the case where multiple remote repositories exist, the remote repository needs to be explicitly named.

As before, start by fetching the latest remote changes:

$ git fetch origin
This will fetch all of the remote branches for you. You can see the branches available for checkout with:

$ git branch -v -a
With the remote branches in hand, you now need to check out the branch you are interested in with -c to create a new local branch:

$ git switch -c test origin/test
For more information about using git switch:

-----------------------		
		
		to associate a local branch (say local) to remote
			git switch <branch name>
			git push -u origin <branch name>
				
N.B: If you get permission denied error
	most likely you have configured another user.
	
	git config user.name "new name e.g. bitsvilas"
	git config credential.username "new name e.g. bitsvilas"

		git push 
			will make you login.

	Pulling/Pushing Braching 
	---------------------------------- 
		git pull 
		git push 
			don't use anything else.
			if the above tracking is properly used.
			
		to see status of various branches in remote and local
			git branch -v
			
			
	Deleting branches
	-----------------
	git branch -d <banchname>
		you cannot delete a branch being in that branch
		use 
			git switch main
			git branch -d <banchname>
			
			if there are changes 
			git branch -d -f <branchname>
			
		to remove a remote branch
			git push origin --delete <branchname>
			
			
	Merging Branches
	----------------
		integrate into current local/HEAD branch
		
		move to the branch that should receive all changes
			git switch main
		
		do it from my exercise
		
		
	Comparing branches
	------------------
	compare it with current branch
		#git log main..<branchname>
	
		git diff main..second-branch
		git diff origin/main..main
		
		
	
			


	-----------------------------------------------------------------------------------------------------------
How to Resolve Merge Conflicts in Git?
-----------------------------------------------------------------------------------------------------------
	• Types of merge conflicts
	
	Merge conflicts occur when Git is unable to automatically merge changes from different branches into a single branch. There are different types of merge conflicts that can occur, depending on the nature of the changes made in the conflicting branches. Here are some common types of merge conflicts:

Content conflict: 
	This type of conflict occurs when two branches have made changes to the same line(s) of code in a file. Git is unable to determine which change to accept, so it prompts the user to resolve the conflict manually.

Rename conflict: 
	This type of conflict occurs when one branch renames a file that another branch is also modifying. Git is unable to determine how to merge the changes, so it prompts the user to resolve the conflict manually.

Add/add conflict: 
	This type of conflict occurs when both branches have added a file with the same name to the same directory. Git is unable to determine which file to keep, so it prompts the user to resolve the conflict manually.

Delete/modify conflict: 
	This type of conflict occurs when one branch deletes a file that another branch is modifying. Git is unable to determine how to merge the changes, so it prompts the user to resolve the conflict manually.

Binary conflict: 
	This type of conflict occurs when two branches have made changes to the same binary file, such as an image or a video. Git is unable to merge the changes, so it prompts the user to resolve the conflict manually.

When a merge conflict occurs, Git will typically mark the conflicting areas in the affected files with special markers, such as "<<<<<<<", "=======", and ">>>>>>>". The user can then manually edit the affected files to resolve the conflict, and then commit the changes to complete the merge.
	
	More details with hands on : GitHandsOn-section 39
	
	
	-----------------------------------------------------------------------------------------------------------
	• Resolve conflicts
	-----------------------------------------------------------------------------------------------------------
	• Git commands to resolve conflicts
	
		When a merge conflict occurs in Git, there are several commands that can be used to resolve the conflict. Here are some common Git commands to resolve conflicts:

		git status: This command shows the files that have conflicts and need to be resolved. It also shows the conflicted lines in the files.

		git diff: This command shows the differences between the conflicted files and the versions in the two branches.

		git mergetool: This command opens a visual merge tool to help resolve the conflict. Git comes with a default merge tool, but other merge tools can also be configured.

		git checkout: This command can be used to discard changes made in the local repository and reset the files to the version in the remote repository. For example, use the command git checkout -- file to reset a specific file.

		git add: This command adds the resolved files to the staging area. For example, use the command git add file to add a specific file to the staging area.

		git commit: This command creates a new commit with the resolved conflicts. Use the command git commit -m "Commit message" to create a new commit with a message.

		git merge --abort: This command can be used to abort the merge and reset the repository to the state before the merge.

		When resolving conflicts, it is important to carefully review the changes made in both branches and ensure that the final version of the file is correct. It is also important to communicate with other collaborators to ensure that everyone is aware of the changes being made.
	
	-----------------------------------------------------------------------------------------------------------
Branches in Git: checkout and branch
-----------------------------------------------------------------------------------------------------------
Merging in Git

	In Git, merging is the process of combining changes from different branches into a single branch. The goal of merging is to create a unified history of changes that reflects the work of multiple contributors. Here are the steps to perform a merge in Git:

	First, ensure that you are in the branch that you want to merge the changes into. For example, if you want to merge changes from the "feature-branch" into the "main" branch, make sure you are in the "main" branch by running the command git checkout main.

	Next, use the git merge command to merge the changes from the other branch into the current branch. For example, use the command git merge feature-branch to merge the changes from the "feature-branch" into the "main" branch.

	Git will attempt to automatically merge the changes. If there are any conflicts, Git will prompt you to resolve the conflicts manually.

	After resolving any conflicts, commit the changes using the git commit command.

	Finally, push the changes to the remote repository using the git push command.

	It is important to carefully review the changes made during the merge process and ensure that the final version of the code is correct. Additionally, it is a good practice to perform regular merges to keep the codebase up to date and reduce the risk of conflicts in the future.




In Git, merging is the process of combining changes from different branches into a single branch. The goal of merging is to create a unified history of changes that reflects the work of multiple contributors. Here are the steps to perform a merge in Git:

First, ensure that you are in the branch that you want to merge the changes into. For example, if you want to merge changes from the "feature-branch" into the "main" branch, make sure you are in the "main" branch by running the command git checkout main.

Next, use the git merge command to merge the changes from the other branch into the current branch. For example, use the command git merge feature-branch to merge the changes from the "feature-branch" into the "main" branch.

Git will attempt to automatically merge the changes. If there are any conflicts, Git will prompt you to resolve the conflicts manually.

After resolving any conflicts, commit the changes using the git commit command.

Finally, push the changes to the remote repository using the git push command.

It is important to carefully review the changes made during the merge process and ensure that the final version of the code is correct. Additionally, it is a good practice to perform regular merges to keep the codebase up to date and reduce the risk of conflicts in the future.

-----------------------------------------------------------------------------------------------------------
Rebasing in Git
-----------------------------------------------------------------------------------------------------------
Git Workflows
-----------------------------------------------------------------------------------------------------------
Git Pull Request 

	In Git, a pull request is a feature that allows collaborators to review and discuss changes made in a branch before merging them into the main branch. The process of creating a pull request involves the following steps:

Create a new branch: Before making any changes, create a new branch to work on. For example, use the command git checkout -b feature-branch to create and switch to a new branch called "feature-branch".

	Make changes: Make the necessary changes to the files in the new branch.

	Push changes to the remote repository: After making changes, push the changes to the remote repository using the command git push origin feature-branch.

	Create a pull request: Go to the repository's web page and create a new pull request from the "feature-branch" to the main branch. Provide a description of the changes made and any other relevant information.

	Review and discuss changes: Collaborators can review the changes made in the pull request and discuss any issues or concerns.

	Merge changes: Once the changes have been reviewed and approved, merge the changes into the main branch by accepting the pull request.

	Using pull requests is a good practice because it allows for code review and collaboration, which can help identify potential issues or improve the quality of the code. Additionally, it helps keep the main branch clean and stable by allowing changes to be made in separate branches and reviewed before being merged into the main branch.







-----------------------------------------------------------------------------------------------------------
	(
	-----------------------------------------------------------------------------------------------------------
	resolve merge conflict in git), 
		refer GitHandsOn.txt
	
		In Git, merging is the process of combining changes from different branches into a single branch. The goal of merging is to create a unified history of changes that reflects the work of multiple contributors. Here are the steps to perform a merge in Git:

First, ensure that you are in the branch that you want to merge the changes into. For example, if you want to merge changes from the "feature-branch" into the "main" branch, make sure you are in the "main" branch by running the command git checkout main.

Next, use the git merge command to merge the changes from the other branch into the current branch. For example, use the command git merge feature-branch to merge the changes from the "feature-branch" into the "main" branch.

Git will attempt to automatically merge the changes. If there are any conflicts, Git will prompt you to resolve the conflicts manually.

After resolving any conflicts, commit the changes using the git commit command.

Finally, push the changes to the remote repository using the git push command.

It is important to carefully review the changes made during the merge process and ensure that the final version of the code is correct. Additionally, it is a good practice to perform regular merges to keep the codebase up to date and reduce the risk of conflicts in the future.
	-----------------------------------------------------------------------------------------------------------
	git cherry-pick
	(Cherry picking git)
	
	git branch another 
	git switch another 
	make 4 transaction in another
	git log --oneline
		find the transaction id 
	
	git switch main 
	git cherry-pick <transaction id of 1> <transaction id of 4>
	git log --oneline
		can see only transaction 1 and 4 merged
		ls/cat to check the changes of transaction 1 and 4 are only present
	
	https://careerkarma.com/blog/git-cherry-pick/
	
	
	-----------------------------------------------------------------------------------------------------------
	Types of branching in git
	-----------------------------------------------------------------------------------------------------------
	The main idea behind the Git flow branching strategy is to isolate your work into different types of branches. There are five different branch types in total:
		Main
		Develop
		Feature
		Release
		Hotfix
			


---------------------------------------------------------
Errors and solutions
--------------------
403 error when you push 

 git config [--local] user.email mailId
 git config [--local] user.name name
 
 git remote set-url origin ssh://git@github.com/bitsvilas/test1.git
 [git remote set-url origin git@github.com:bitsvilas/test1.git]
 
 
 
 

